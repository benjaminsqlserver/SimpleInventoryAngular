/*
  This file is automatically generated. Any changes will be overwritten.
  Modify edit-product.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { LabelComponent } from '@radzen/angular/dist/label';
import { ButtonComponent } from '@radzen/angular/dist/button';
import { TemplateFormComponent } from '@radzen/angular/dist/template-form';
import { TextBoxComponent } from '@radzen/angular/dist/textbox';
import { RequiredValidatorComponent } from '@radzen/angular/dist/required-validator';
import { DropDownDataGridComponent } from '@radzen/angular/dist/dropdown-datagrid';
import { NumericComponent } from '@radzen/angular/dist/numeric';
import { CheckBoxComponent } from '@radzen/angular/dist/checkbox';

import { ConfigService } from '../config.service';

import { ConDataService } from '../con-data.service';
import { SecurityService } from '../security.service';

export class EditProductGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('closeLabel') closeLabel: LabelComponent;
  @ViewChild('closeButton') closeButton: ButtonComponent;
  @ViewChild('label0') label0: LabelComponent;
  @ViewChild('button0') button0: ButtonComponent;
  @ViewChild('form0') form0: TemplateFormComponent;
  @ViewChild('productNameLabel') productNameLabel: LabelComponent;
  @ViewChild('productName') productName: TextBoxComponent;
  @ViewChild('productNameRequiredValidator') productNameRequiredValidator: RequiredValidatorComponent;
  @ViewChild('supplierIdLabel') supplierIdLabel: LabelComponent;
  @ViewChild('supplierId') supplierId: DropDownDataGridComponent;
  @ViewChild('supplierIdRequiredValidator') supplierIdRequiredValidator: RequiredValidatorComponent;
  @ViewChild('categoryIdLabel') categoryIdLabel: LabelComponent;
  @ViewChild('categoryId') categoryId: DropDownDataGridComponent;
  @ViewChild('categoryIdRequiredValidator') categoryIdRequiredValidator: RequiredValidatorComponent;
  @ViewChild('quantityPerUnitLabel') quantityPerUnitLabel: LabelComponent;
  @ViewChild('quantityPerUnit') quantityPerUnit: TextBoxComponent;
  @ViewChild('unitPriceLabel') unitPriceLabel: LabelComponent;
  @ViewChild('unitPrice') unitPrice: NumericComponent;
  @ViewChild('unitsInStockLabel') unitsInStockLabel: LabelComponent;
  @ViewChild('unitsInStock') unitsInStock: NumericComponent;
  @ViewChild('unitsOnOrderLabel') unitsOnOrderLabel: LabelComponent;
  @ViewChild('unitsOnOrder') unitsOnOrder: NumericComponent;
  @ViewChild('reorderLevelLabel') reorderLevelLabel: LabelComponent;
  @ViewChild('reorderLevel') reorderLevel: NumericComponent;
  @ViewChild('discontinuedLabel') discontinuedLabel: LabelComponent;
  @ViewChild('discontinued') discontinued: CheckBoxComponent;
  @ViewChild('button3') button3: ButtonComponent;
  @ViewChild('button4') button4: ButtonComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  conData: ConDataService;

  security: SecurityService;
  hasChanges: any;
  canEdit: any;
  product: any;
  getBySuppliersForSupplierIDResult: any;
  getByCategoriesForCategoryIDResult: any;
  getSuppliersForSupplierIDPageSize: any;
  getSuppliersForSupplierIDResult: any;
  getSuppliersForSupplierIDCount: any;
  getCategoriesForCategoryIDPageSize: any;
  getCategoriesForCategoryIDResult: any;
  getCategoriesForCategoryIDCount: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.conData = this.injector.get(ConDataService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.hasChanges = false;

    this.canEdit = true;

    this.conData.getProductByProductId(null, this.parameters.ProductID)
    .subscribe((result: any) => {
      this.product = result;

      if (this.product.SupplierID != null) {
              this.conData.getSupplierBySupplierId(null, this.product.SupplierID)
        .subscribe((result: any) => {
              this.getBySuppliersForSupplierIDResult = result;
        }, (result: any) => {
      
        });
      }

      if (this.product.CategoryID != null) {
              this.conData.getCategoryByCategoryId(null, this.product.CategoryID)
        .subscribe((result: any) => {
              this.getByCategoriesForCategoryIDResult = result;
        }, (result: any) => {
      
        });
      }
    }, (result: any) => {
      this.canEdit = !(result.status == 400);
    });

    this.getSuppliersForSupplierIDPageSize = 10;

    this.conData.getSuppliers(null, this.getSuppliersForSupplierIDPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getSuppliersForSupplierIDResult = result.value;

      this.getSuppliersForSupplierIDCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getCategoriesForCategoryIDPageSize = 10;

    this.conData.getCategories(null, this.getCategoriesForCategoryIDPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getCategoriesForCategoryIDResult = result.value;

      this.getCategoriesForCategoryIDCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  closeButtonClick(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }

  button0Click(event: any) {
    this.load()
  }

  form0Submit(event: any) {
    this.conData.updateProduct(`Supplier,Category`, this.parameters.ProductID, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      } else {
        this._location.back();
      }
    }, (result: any) => {
      this.hasChanges = result.status == 412;

      this.canEdit = !(result.status == 400);

      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to update Product` });
    });
  }

  SupplierIDLoadData(event: any) {
    this.conData.getSuppliers(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.getSuppliersForSupplierIDResult = result.value;

      this.getSuppliersForSupplierIDCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  CategoryIDLoadData(event: any) {
    this.conData.getCategories(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
    .subscribe((result: any) => {
      this.getCategoriesForCategoryIDResult = result.value;

      this.getCategoriesForCategoryIDCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  button4Click(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }
}
