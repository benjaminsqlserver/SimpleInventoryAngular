/*
  This file is automatically generated. Any changes will be overwritten.
  Modify inventory-transactions.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { GridComponent } from '@radzen/angular/dist/grid';

import { ConfigService } from '../config.service';
import { AddInventoryTransactionComponent } from '../add-inventory-transaction/add-inventory-transaction.component';
import { EditInventoryTransactionComponent } from '../edit-inventory-transaction/edit-inventory-transaction.component';

import { ConDataService } from '../con-data.service';
import { SecurityService } from '../security.service';

export class InventoryTransactionsGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('grid0') grid0: GridComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  conData: ConDataService;

  security: SecurityService;
  parameters: any;
  getInventoryTransactionsResult: any;
  getInventoryTransactionsCount: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.conData = this.injector.get(ConDataService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }


  load() {
    this.grid0.load();
  }

  grid0LoadData(event: any) {
    this.conData.getInventoryTransactions(`${event.filter}`, event.top, event.skip, `${event.orderby}`, event.top != null && event.skip != null, `Product`, null, null)
    .subscribe((result: any) => {
      this.getInventoryTransactionsResult = result.value;

      this.getInventoryTransactionsCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to load InventoryTransactions` });
    });
  }

  grid0Delete(event: any) {
    this.conData.deleteInventoryTransaction(event.TransactionID)
    .subscribe((result: any) => {
      this.notificationService.notify({ severity: "success", summary: `Success`, detail: `InventoryTransaction deleted!` });
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to delete InventoryTransaction` });
    });
  }

  grid0Add(event: any) {
    this.dialogService.open(AddInventoryTransactionComponent, { parameters: {}, title: 'Add Inventory Transaction' });
  }

  grid0RowSelect(event: any) {
    this.dialogService.open(EditInventoryTransactionComponent, { parameters: {TransactionID: event.TransactionID}, title: 'Edit Inventory Transaction' });
  }
}
